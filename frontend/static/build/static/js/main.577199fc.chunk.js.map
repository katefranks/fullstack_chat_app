{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","instantMessages","instantMessage","addInstantMessage","bind","handleInput","fetch","then","response","json","data","setState","e","this","target","name","value","preventDefault","created_at","user_name","message_text","options","method","headers","Cookies","get","body","JSON","stringify","console","log","push","map","className","id","instantmessages","onSubmit","type","onChange","placeholder","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAoFeA,E,kDA/Eb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,gBAAiB,GACjBC,eAAgB,IAGlB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBARH,E,qDAWpB,WAAoB,IAAD,OACfE,MAAM,4BACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEV,gBAAiBS,S,yBAEnD,SAAYE,GACVC,KAAKF,SAAL,eAAgBC,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,U,+BAG3C,SAAkBJ,GAAG,IAAD,OAGlBA,EAAEK,iBAEF,IAAMf,EAAiB,CACrBgB,WAAYL,KAAKb,MAAMkB,WACvBC,UAAWN,KAAKb,MAAMmB,UACtBC,aAAcP,KAAKb,MAAMoB,cAGrBC,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAeC,IAAQC,IAAI,cAE7BC,KAAMC,KAAKC,UAAU1B,IAIvBI,MAAM,2BAA4Be,GAC/Bd,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAImB,QAAQC,IAAIpB,MAEzBH,MAAK,SAAAC,GAEA,IAAMP,EAAe,YAAO,EAAKD,MAAMC,iBACvCA,EAAgB8B,KAAK7B,GACrB,EAAKS,SAAS,CAAEV,yB,oBAK1B,WACE,IAAMA,EAAkBY,KAAKb,MAAMC,gBAAgB+B,KAAI,SAAA9B,GAAc,OACnE,qBAAI+B,UAAU,mBAAd,UACA,0CAAa/B,EAAegB,cAC5B,mBAAGe,UAAU,aAAb,SAA2B/B,EAAeiB,YAC1C,mBAAGc,UAAU,+BAAb,SAA6C/B,EAAekB,iBAHtBlB,EAAegC,OAMvD,OAGE,sBAAKD,UAAU,qBAAf,UACA,wBAAQA,UAAU,kBAAlB,SACE,mBAAGC,GAAG,cAAN,iCAEF,oBAAIC,gBAAiBtB,KAAKb,MAAMC,gBAAiBgC,UAAU,yBAA3D,SAAqFhC,IACrF,uBAAMgC,UAAU,aAAaG,SAAUvB,KAAKV,kBAA5C,UACE,uBAAO8B,UAAU,YAAYI,KAAK,OAAOtB,KAAK,YAAYC,MAAOH,KAAKb,MAAMmB,UAAWmB,SAAUzB,KAAKR,YAAakC,YAAY,eAC/H,uBAAON,UAAU,YAAYI,KAAK,OAAOtB,KAAK,eAAeC,MAAOH,KAAKb,MAAMoB,aAAckB,SAAUzB,KAAKR,YAAakC,YAAY,eACrI,wBAAQN,UAAU,cAAcI,KAAK,SAASrB,MAAM,SAApD,4B,GA1EUwB,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.577199fc.chunk.js","sourcesContent":["import React from 'react';\nimport Cookies from 'js-cookie';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      instantMessages: [],\n      instantMessage: [],\n\n    }\n    this.addInstantMessage = this.addInstantMessage.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    // this.addToChatWindow = this.addToChatWindow.bind(this);\n}\ncomponentDidMount(){\n    fetch('/api/v1/instantMessages/')\n      .then(response => response.json())\n      .then(data => this.setState({ instantMessages: data }));\n  }\n  handleInput(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  addInstantMessage(e){\n    // console.log(this.state.value);\n\n    e.preventDefault();\n\n    const instantMessage = {\n      created_at: this.state.created_at,\n      user_name: this.state.user_name,\n      message_text: this.state.message_text,\n    };\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': Cookies.get('csrftoken'),\n      },\n      body: JSON.stringify(instantMessage),\n    }\n\n\n    fetch('/api/v1/instantMessages/', options)\n      .then(response => response.json())\n      .then(data => console.log(data))\n      // .then(data => this.setState({ instantMessages: data }));\n      .then(response => {\n            //logic to update state\n            const instantMessages = [...this.state.instantMessages];\n            instantMessages.push(instantMessage)\n            this.setState({ instantMessages });\n          });\n\n  }\n\n  render(){\n    const instantMessages = this.state.instantMessages.map(instantMessage => (\n      <li className=\"instant-messages\" key={instantMessage.id}>\n      <p>Sent at: {instantMessage.created_at}</p>\n      <p className=\"user_image\">{instantMessage.user_name}</p>\n      <p className=\"instant-message-text-display\">{instantMessage.message_text}</p>\n      </li>\n    ))\n    return(\n\n\n      <div className=\"chat-app-container\">\n      <header className=\"chat-app-header\">\n        <p id=\"header-text\">Instant Messenger</p>\n      </header>\n      <ul instantmessages={this.state.instantMessages} className=\"instant-message-window\">{instantMessages}</ul>\n      <form className=\"input-form\" onSubmit={this.addInstantMessage}>\n        <input className=\"input-box\" type=\"text\" name=\"user_name\" value={this.state.user_name} onChange={this.handleInput} placeholder=\"Enter Name\"/>\n        <input className=\"input-box\" type=\"text\" name=\"message_text\" value={this.state.message_text} onChange={this.handleInput} placeholder=\"Enter Text\"/>\n        <button className=\"form-button\" type=\"submit\" value=\"Submit\">SEND</button>\n      </form>\n      </div>\n    )\n  }\n}\nexport default App;\n\n//   <ul instantmessages={this.setState({instantMessages})}\n\n// onClick={() => this.addToChatWindow(this.newMessage)}\n/////////////////////////\n// REFACTORING\n/////////////////////////\n// import React from 'react';\n// import Cookies from 'js-cookie';\n// import './App.css';\n//\n// class App extends React.Component {\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       instantMessages: [],\n//\n//     }\n//     this.addInstantMessage = this.addInstantMessage.bind(this);\n//     this.handleInput = this.handleInput.bind(this);\n//     // this.addToChatWindow = this.addToChatWindow.bind(this);\n// }\n// componentDidMount(){\n//     fetch('/api/v1/instantMessages/')\n//       .then(response => response.json())\n//       .then(data => this.setState({ instantMessages: data }));\n//   }\n//   handleInput(e) {\n//     this.setState({[e.target.name]: e.target.value});\n//   }\n//\n//   addInstantMessage(e){\n//     console.log(this.state.value);\n//     e.preventDefault();\n//\n//     const instantMessage = {\n//       // created_at: this.state.created_at,\n//       user_name: this.state.user_name,\n//       message_text: this.state.message_text,\n//     };\n//\n//     const options = {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'X-CSRFToken': Cookies.get('csrftoken'),\n//       },\n//       body: JSON.stringify(instantMessage),\n//     }\n//     fetch('/api/v1/instantMessages/', options)\n//       .then(response => response.json())\n//       .then(data => console.log(data));\n//   }\n//   // addToChatWindow(newMessage) {\n//   //   const instantMessages = [...this.state.instantMessages];\n//   //   instantMessages.push(newMessage);\n//   //   this.setState({instantMessages});\n//   // }\n//\n//   render(){\n//     const instantMessages = this.state.instantMessages.map(instantMessage => (\n//       <li key={instantMessage.id}>\n//       <p>{instantMessage.created_at}</p>\n//       <p>{instantMessage.user_name}</p>\n//       <p>{instantMessage.message_text}</p>\n//       </li>\n//     ))\n//     return(\n//\n//       <div>\n//       <ul>{instantMessages}</ul>\n//       <form onSubmit={this.addInstantMessage}>\n//         <input type=\"text\" name=\"user_name\" value={this.state.user_name} onChange={this.handleInput} placeholder=\"Enter Name\"/>\n//         <input type=\"text\" name=\"message_text\" value={this.state.message_text} onChange={this.handleInput} placeholder=\"Enter Text\"/>\n//         <button type=\"submit\" value=\"Submit\">Submit</button>\n//       </form>\n//       </div>\n//     )\n//   }\n// }\n// export default App;\n\n// removed from button:\n// onClick={() => this.state.addToChatWindow(this.instantMessages)}\n\n/////\n// render(){\n//   const instantMessages = this.state.instantMessages.map((instantMessage) => {\n//     const instantMessage = instantMessages.instantMessage.map()\n//     <li className=\"instant-messages\" key={instantMessage.id}>\n//     <p>{instantMessage.created_at}</p>\n//     <p>{instantMessage.user_name}</p>\n//     <p className=\"instant-message-text-display\">{instantMessage.message_text}</p>\n//     </li>\n//   })\n//   return\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}