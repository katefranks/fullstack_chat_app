{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","instantMessages","addInstantMessage","bind","handleInput","addToChatWindow","fetch","then","response","json","data","setState","e","this","target","name","value","console","log","preventDefault","instantMessage","user_name","message_text","options","method","headers","Cookies","get","body","JSON","stringify","push","map","className","created_at","id","onSubmit","type","onChange","placeholder","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRA2EeA,E,kDAtEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,gBAAiB,IAGnB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBARP,E,qDAUpB,WAAoB,IAAD,OACfG,MAAM,4BACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEV,gBAAiBS,S,yBAEnD,SAAYE,GACVC,KAAKF,SAAL,eAAgBC,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,U,+BAG3C,SAAkBJ,GAChBK,QAAQC,IAAIL,KAAKb,MAAMgB,OACvBJ,EAAEO,iBAEF,IAAMC,EAAiB,CAErBC,UAAWR,KAAKb,MAAMqB,UACtBC,aAAcT,KAAKb,MAAMsB,cAGrBC,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAeC,IAAQC,IAAI,cAE7BC,KAAMC,KAAKC,UAAUV,IAEvBd,MAAM,2BAA4BiB,GAC/BhB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIO,QAAQC,IAAIR,Q,6BAG9B,SAAgBU,GACd,IAAMnB,EAAe,YAAOY,KAAKb,MAAMC,iBACvCY,KAAKZ,gBAAgB8B,KAAKX,GAC1BP,KAAKF,SAAS,CAACV,sB,oBAGjB,WAAS,IAAD,OACAA,EAAkBY,KAAKb,MAAMC,gBAAgB+B,KAAI,SAAAZ,GAAc,OACnE,qBAAIa,UAAU,mBAAd,UACA,4BAAIb,EAAec,aACnB,4BAAId,EAAeC,YACnB,mBAAGY,UAAU,+BAAb,SAA6Cb,EAAeE,iBAHtBF,EAAee,OAMvD,OAEE,sBAAKF,UAAU,qBAAf,UACA,wBAAQA,UAAU,kBAAlB,+BACA,uBAAMG,SAAUvB,KAAKX,kBAArB,UACE,uBAAOmC,KAAK,OAAOtB,KAAK,YAAYC,MAAOH,KAAKb,MAAMqB,UAAWiB,SAAUzB,KAAKT,YAAamC,YAAY,eACzG,uBAAOF,KAAK,OAAOtB,KAAK,eAAeC,MAAOH,KAAKb,MAAMsB,aAAcgB,SAAUzB,KAAKT,YAAamC,YAAY,eAC/G,wBAAQF,KAAK,SAASrB,MAAM,SAASwB,QAAS,kBAAM,EAAKxC,MAAMK,gBAAgB,EAAKJ,kBAApF,uBAEF,oBAAIgC,UAAU,yBAAd,SAAwChC,W,GAlE5BwC,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.243fc2e3.chunk.js","sourcesContent":["import React from 'react';\nimport Cookies from 'js-cookie';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      instantMessages: [],\n\n    }\n    this.addInstantMessage = this.addInstantMessage.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.addToChatWindow = this.addToChatWindow.bind(this);\n}\ncomponentDidMount(){\n    fetch('/api/v1/instantMessages/')\n      .then(response => response.json())\n      .then(data => this.setState({ instantMessages: data }));\n  }\n  handleInput(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  addInstantMessage(e){\n    console.log(this.state.value);\n    e.preventDefault();\n\n    const instantMessage = {\n      // created_at: this.state.created_at,\n      user_name: this.state.user_name,\n      message_text: this.state.message_text,\n    };\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': Cookies.get('csrftoken'),\n      },\n      body: JSON.stringify(instantMessage),\n    }\n    fetch('/api/v1/instantMessages/', options)\n      .then(response => response.json())\n      .then(data => console.log(data));\n  }\n\n  addToChatWindow(instantMessage) {\n    const instantMessages = [...this.state.instantMessages];\n    this.instantMessages.push(instantMessage);\n    this.setState({instantMessages});\n  }\n\n  render(){\n    const instantMessages = this.state.instantMessages.map(instantMessage => (\n      <li className=\"instant-messages\" key={instantMessage.id}>\n      <p>{instantMessage.created_at}</p>\n      <p>{instantMessage.user_name}</p>\n      <p className=\"instant-message-text-display\">{instantMessage.message_text}</p>\n      </li>\n    ))\n    return(\n\n      <div className=\"chat-app-container\">\n      <header className=\"chat-app-header\">Instant Messenger</header>\n      <form onSubmit={this.addInstantMessage}>\n        <input type=\"text\" name=\"user_name\" value={this.state.user_name} onChange={this.handleInput} placeholder=\"Enter Name\"/>\n        <input type=\"text\" name=\"message_text\" value={this.state.message_text} onChange={this.handleInput} placeholder=\"Enter Text\"/>\n        <button type=\"submit\" value=\"Submit\" onClick={() => this.state.addToChatWindow(this.instantMessages)}>Submit</button>\n      </form>\n      <ul className=\"instant-message-window\">{instantMessages}</ul>\n      </div>\n    )\n  }\n}\nexport default App;\n\n// onClick={() => this.addToChatWindow(this.newMessage)}\n/////////////////////////\n// REFACTORING\n/////////////////////////\n// import React from 'react';\n// import Cookies from 'js-cookie';\n// import './App.css';\n//\n// class App extends React.Component {\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       instantMessages: [],\n//\n//     }\n//     this.addInstantMessage = this.addInstantMessage.bind(this);\n//     this.handleInput = this.handleInput.bind(this);\n//     // this.addToChatWindow = this.addToChatWindow.bind(this);\n// }\n// componentDidMount(){\n//     fetch('/api/v1/instantMessages/')\n//       .then(response => response.json())\n//       .then(data => this.setState({ instantMessages: data }));\n//   }\n//   handleInput(e) {\n//     this.setState({[e.target.name]: e.target.value});\n//   }\n//\n//   addInstantMessage(e){\n//     console.log(this.state.value);\n//     e.preventDefault();\n//\n//     const instantMessage = {\n//       // created_at: this.state.created_at,\n//       user_name: this.state.user_name,\n//       message_text: this.state.message_text,\n//     };\n//\n//     const options = {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'X-CSRFToken': Cookies.get('csrftoken'),\n//       },\n//       body: JSON.stringify(instantMessage),\n//     }\n//     fetch('/api/v1/instantMessages/', options)\n//       .then(response => response.json())\n//       .then(data => console.log(data));\n//   }\n//   // addToChatWindow(newMessage) {\n//   //   const instantMessages = [...this.state.instantMessages];\n//   //   instantMessages.push(newMessage);\n//   //   this.setState({instantMessages});\n//   // }\n//\n//   render(){\n//     const instantMessages = this.state.instantMessages.map(instantMessage => (\n//       <li key={instantMessage.id}>\n//       <p>{instantMessage.created_at}</p>\n//       <p>{instantMessage.user_name}</p>\n//       <p>{instantMessage.message_text}</p>\n//       </li>\n//     ))\n//     return(\n//\n//       <div>\n//       <ul>{instantMessages}</ul>\n//       <form onSubmit={this.addInstantMessage}>\n//         <input type=\"text\" name=\"user_name\" value={this.state.user_name} onChange={this.handleInput} placeholder=\"Enter Name\"/>\n//         <input type=\"text\" name=\"message_text\" value={this.state.message_text} onChange={this.handleInput} placeholder=\"Enter Text\"/>\n//         <button type=\"submit\" value=\"Submit\">Submit</button>\n//       </form>\n//       </div>\n//     )\n//   }\n// }\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}