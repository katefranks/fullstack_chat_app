{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","instantMessages","addInstantMessage","bind","handleInput","fetch","then","response","json","data","setState","e","this","target","name","value","console","log","preventDefault","instantMessage","user_name","message_text","options","method","headers","Cookies","get","body","JSON","stringify","map","created_at","id","onSubmit","type","onChange","placeholder","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAmEeA,E,kDA9Db,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,gBAAiB,IAGnB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAPH,E,qDASpB,WAAoB,IAAD,OACfE,MAAM,4BACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAET,gBAAiBQ,S,yBAEnD,SAAYE,GACVC,KAAKF,SAAL,eAAgBC,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,U,+BAG3C,SAAkBJ,GAChBK,QAAQC,IAAIL,KAAKZ,MAAMe,OACvBJ,EAAEO,iBAEF,IAAMC,EAAiB,CAErBC,UAAWR,KAAKZ,MAAMoB,UACtBC,aAAcT,KAAKZ,MAAMqB,cAGrBC,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAeC,IAAQC,IAAI,cAE7BC,KAAMC,KAAKC,UAAUV,IAEvBd,MAAM,2BAA4BiB,GAC/BhB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIO,QAAQC,IAAIR,Q,oBAG9B,WACE,IAAMR,EAAkBW,KAAKZ,MAAMC,gBAAgB6B,KAAI,SAAAX,GAAc,OACnE,+BACA,4BAAIA,EAAeY,aACnB,4BAAIZ,EAAeC,YACnB,4BAAID,EAAeE,iBAHVF,EAAea,OAM1B,OAEE,gCACA,6BAAK/B,IACL,uBAAMgC,SAAUrB,KAAKV,kBAArB,UACE,uBAAOgC,KAAK,OAAOpB,KAAK,YAAYC,MAAOH,KAAKZ,MAAMoB,UAAWe,SAAUvB,KAAKR,YAAagC,YAAY,eACzG,uBAAOF,KAAK,OAAOpB,KAAK,eAAeC,MAAOH,KAAKZ,MAAMqB,aAAcc,SAAUvB,KAAKR,YAAagC,YAAY,eAC/G,wBAAQF,KAAK,SAASnB,MAAM,SAA5B,8B,GAzDUsB,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6969110b.chunk.js","sourcesContent":["import React from 'react';\nimport Cookies from 'js-cookie';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      instantMessages: [],\n\n    }\n    this.addInstantMessage = this.addInstantMessage.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n}\ncomponentDidMount(){\n    fetch('/api/v1/instantMessages/')\n      .then(response => response.json())\n      .then(data => this.setState({ instantMessages: data }));\n  }\n  handleInput(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  addInstantMessage(e){\n    console.log(this.state.value);\n    e.preventDefault();\n\n    const instantMessage = {\n      // created_at: this.state.created_at,\n      user_name: this.state.user_name,\n      message_text: this.state.message_text,\n    };\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': Cookies.get('csrftoken'),\n      },\n      body: JSON.stringify(instantMessage),\n    }\n    fetch('/api/v1/instantMessages/', options)\n      .then(response => response.json())\n      .then(data => console.log(data));\n  }\n\n  render(){\n    const instantMessages = this.state.instantMessages.map(instantMessage => (\n      <li key={instantMessage.id}>\n      <p>{instantMessage.created_at}</p>\n      <p>{instantMessage.user_name}</p>\n      <p>{instantMessage.message_text}</p>\n      </li>\n    ))\n    return(\n\n      <div>\n      <ul>{instantMessages}</ul>\n      <form onSubmit={this.addInstantMessage}>\n        <input type=\"text\" name=\"user_name\" value={this.state.user_name} onChange={this.handleInput} placeholder=\"Enter Name\"/>\n        <input type=\"text\" name=\"message_text\" value={this.state.message_text} onChange={this.handleInput} placeholder=\"Enter Text\"/>\n        <button type=\"submit\" value=\"Submit\">Submit</button>\n      </form>\n      </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}